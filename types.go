// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Ryan-Amirthan/MovieAPI-GoSDK/internal"
)

type AccountFavoriteMoviesRequest struct {
	Page     *int                                `json:"-" url:"page,omitempty"`
	Language *string                             `json:"-" url:"language,omitempty"`
	SortBy   *AccountFavoriteMoviesRequestSortBy `json:"-" url:"sort_by,omitempty"`
}

type AccountFavoriteTvRequest struct {
	Page     *int                            `json:"-" url:"page,omitempty"`
	Language *string                         `json:"-" url:"language,omitempty"`
	SortBy   *AccountFavoriteTvRequestSortBy `json:"-" url:"sort_by,omitempty"`
}

type AccountListsRequest struct {
	Page *int `json:"-" url:"page,omitempty"`
}

type AccountMovieRecommendationsRequest struct {
	Page     *int    `json:"-" url:"page,omitempty"`
	Language *string `json:"-" url:"language,omitempty"`
}

type AccountMovieWatchlistRequest struct {
	Page     *int                                `json:"-" url:"page,omitempty"`
	Language *string                             `json:"-" url:"language,omitempty"`
	SortBy   *AccountMovieWatchlistRequestSortBy `json:"-" url:"sort_by,omitempty"`
}

type AccountRatedMoviesRequest struct {
	Page     *int                             `json:"-" url:"page,omitempty"`
	Language *string                          `json:"-" url:"language,omitempty"`
	SortBy   *AccountRatedMoviesRequestSortBy `json:"-" url:"sort_by,omitempty"`
}

type AccountRatedTvRequest struct {
	Page     *int                         `json:"-" url:"page,omitempty"`
	Language *string                      `json:"-" url:"language,omitempty"`
	SortBy   *AccountRatedTvRequestSortBy `json:"-" url:"sort_by,omitempty"`
}

type AccountTvRecommendationsRequest struct {
	Page     *int    `json:"-" url:"page,omitempty"`
	Language *string `json:"-" url:"language,omitempty"`
}

type AccountTvWatchlistRequest struct {
	Page     *int                             `json:"-" url:"page,omitempty"`
	Language *string                          `json:"-" url:"language,omitempty"`
	SortBy   *AccountTvWatchlistRequestSortBy `json:"-" url:"sort_by,omitempty"`
}

type AuthCreateAccessTokenRequest struct {
	RawBody string `json:"RAW_BODY" url:"-"`
}

type AuthCreateRequestTokenRequest struct {
	RawBody string `json:"RAW_BODY" url:"-"`
}

type AuthLogoutRequest struct {
	RawBody string `json:"RAW_BODY" url:"-"`
}

type ListAddItemsRequest struct {
	RawBody string `json:"RAW_BODY" url:"-"`
}

type ListCreateRequest struct {
	RawBody string `json:"RAW_BODY" url:"-"`
}

type ListDetailsRequest struct {
	Language *string `json:"-" url:"language,omitempty"`
	Page     *int    `json:"-" url:"page,omitempty"`
}

type ListItemStatusRequest struct {
	MediaId   int                            `json:"-" url:"media_id"`
	MediaType ListItemStatusRequestMediaType `json:"-" url:"media_type"`
}

type ListRemoveItemsRequest struct {
	RawBody string `json:"RAW_BODY" url:"-"`
}

type ListUpdateRequest struct {
	RawBody string `json:"RAW_BODY" url:"-"`
}

type ListUpdateItemsRequest struct {
	RawBody string `json:"RAW_BODY" url:"-"`
}

type AccountFavoriteMoviesRequestSortBy string

const (
	AccountFavoriteMoviesRequestSortByCreatedAtAsc  AccountFavoriteMoviesRequestSortBy = "created_at.asc"
	AccountFavoriteMoviesRequestSortByCreatedAtDesc AccountFavoriteMoviesRequestSortBy = "created_at.desc"
)

func NewAccountFavoriteMoviesRequestSortByFromString(s string) (AccountFavoriteMoviesRequestSortBy, error) {
	switch s {
	case "created_at.asc":
		return AccountFavoriteMoviesRequestSortByCreatedAtAsc, nil
	case "created_at.desc":
		return AccountFavoriteMoviesRequestSortByCreatedAtDesc, nil
	}
	var t AccountFavoriteMoviesRequestSortBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountFavoriteMoviesRequestSortBy) Ptr() *AccountFavoriteMoviesRequestSortBy {
	return &a
}

type AccountFavoriteMoviesResponse struct {
	Page         *int                                        `json:"page,omitempty" url:"page,omitempty"`
	Results      []*AccountFavoriteMoviesResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	TotalPages   *int                                        `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	TotalResults *int                                        `json:"total_results,omitempty" url:"total_results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountFavoriteMoviesResponse) GetPage() *int {
	if a == nil {
		return nil
	}
	return a.Page
}

func (a *AccountFavoriteMoviesResponse) GetResults() []*AccountFavoriteMoviesResponseResultsItem {
	if a == nil {
		return nil
	}
	return a.Results
}

func (a *AccountFavoriteMoviesResponse) GetTotalPages() *int {
	if a == nil {
		return nil
	}
	return a.TotalPages
}

func (a *AccountFavoriteMoviesResponse) GetTotalResults() *int {
	if a == nil {
		return nil
	}
	return a.TotalResults
}

func (a *AccountFavoriteMoviesResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountFavoriteMoviesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountFavoriteMoviesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountFavoriteMoviesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountFavoriteMoviesResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountFavoriteMoviesResponseResultsItem struct {
	Adult            *bool    `json:"adult,omitempty" url:"adult,omitempty"`
	BackdropPath     *string  `json:"backdrop_path,omitempty" url:"backdrop_path,omitempty"`
	GenreIds         []int    `json:"genre_ids,omitempty" url:"genre_ids,omitempty"`
	Id               *int     `json:"id,omitempty" url:"id,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty" url:"original_language,omitempty"`
	OriginalTitle    *string  `json:"original_title,omitempty" url:"original_title,omitempty"`
	Overview         *string  `json:"overview,omitempty" url:"overview,omitempty"`
	Popularity       *float64 `json:"popularity,omitempty" url:"popularity,omitempty"`
	PosterPath       *string  `json:"poster_path,omitempty" url:"poster_path,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty" url:"release_date,omitempty"`
	Title            *string  `json:"title,omitempty" url:"title,omitempty"`
	Video            *bool    `json:"video,omitempty" url:"video,omitempty"`
	VoteAverage      *float64 `json:"vote_average,omitempty" url:"vote_average,omitempty"`
	VoteCount        *int     `json:"vote_count,omitempty" url:"vote_count,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetAdult() *bool {
	if a == nil {
		return nil
	}
	return a.Adult
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetBackdropPath() *string {
	if a == nil {
		return nil
	}
	return a.BackdropPath
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetGenreIds() []int {
	if a == nil {
		return nil
	}
	return a.GenreIds
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetId() *int {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetOriginalLanguage() *string {
	if a == nil {
		return nil
	}
	return a.OriginalLanguage
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetOriginalTitle() *string {
	if a == nil {
		return nil
	}
	return a.OriginalTitle
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetOverview() *string {
	if a == nil {
		return nil
	}
	return a.Overview
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetPopularity() *float64 {
	if a == nil {
		return nil
	}
	return a.Popularity
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetPosterPath() *string {
	if a == nil {
		return nil
	}
	return a.PosterPath
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetReleaseDate() *string {
	if a == nil {
		return nil
	}
	return a.ReleaseDate
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetTitle() *string {
	if a == nil {
		return nil
	}
	return a.Title
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetVideo() *bool {
	if a == nil {
		return nil
	}
	return a.Video
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetVoteAverage() *float64 {
	if a == nil {
		return nil
	}
	return a.VoteAverage
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetVoteCount() *int {
	if a == nil {
		return nil
	}
	return a.VoteCount
}

func (a *AccountFavoriteMoviesResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountFavoriteMoviesResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountFavoriteMoviesResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountFavoriteMoviesResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountFavoriteMoviesResponseResultsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountFavoriteTvRequestSortBy string

const (
	AccountFavoriteTvRequestSortByCreatedAtAsc  AccountFavoriteTvRequestSortBy = "created_at.asc"
	AccountFavoriteTvRequestSortByCreatedAtDesc AccountFavoriteTvRequestSortBy = "created_at.desc"
)

func NewAccountFavoriteTvRequestSortByFromString(s string) (AccountFavoriteTvRequestSortBy, error) {
	switch s {
	case "created_at.asc":
		return AccountFavoriteTvRequestSortByCreatedAtAsc, nil
	case "created_at.desc":
		return AccountFavoriteTvRequestSortByCreatedAtDesc, nil
	}
	var t AccountFavoriteTvRequestSortBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountFavoriteTvRequestSortBy) Ptr() *AccountFavoriteTvRequestSortBy {
	return &a
}

type AccountFavoriteTvResponse struct {
	Page         *int                                    `json:"page,omitempty" url:"page,omitempty"`
	Results      []*AccountFavoriteTvResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	TotalPages   *int                                    `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	TotalResults *int                                    `json:"total_results,omitempty" url:"total_results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountFavoriteTvResponse) GetPage() *int {
	if a == nil {
		return nil
	}
	return a.Page
}

func (a *AccountFavoriteTvResponse) GetResults() []*AccountFavoriteTvResponseResultsItem {
	if a == nil {
		return nil
	}
	return a.Results
}

func (a *AccountFavoriteTvResponse) GetTotalPages() *int {
	if a == nil {
		return nil
	}
	return a.TotalPages
}

func (a *AccountFavoriteTvResponse) GetTotalResults() *int {
	if a == nil {
		return nil
	}
	return a.TotalResults
}

func (a *AccountFavoriteTvResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountFavoriteTvResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountFavoriteTvResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountFavoriteTvResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountFavoriteTvResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountFavoriteTvResponseResultsItem struct {
	Adult            *bool    `json:"adult,omitempty" url:"adult,omitempty"`
	BackdropPath     *string  `json:"backdrop_path,omitempty" url:"backdrop_path,omitempty"`
	GenreIds         []int    `json:"genre_ids,omitempty" url:"genre_ids,omitempty"`
	Id               *int     `json:"id,omitempty" url:"id,omitempty"`
	OriginCountry    []string `json:"origin_country,omitempty" url:"origin_country,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty" url:"original_language,omitempty"`
	OriginalName     *string  `json:"original_name,omitempty" url:"original_name,omitempty"`
	Overview         *string  `json:"overview,omitempty" url:"overview,omitempty"`
	Popularity       *float64 `json:"popularity,omitempty" url:"popularity,omitempty"`
	PosterPath       *string  `json:"poster_path,omitempty" url:"poster_path,omitempty"`
	FirstAirDate     *string  `json:"first_air_date,omitempty" url:"first_air_date,omitempty"`
	Name             *string  `json:"name,omitempty" url:"name,omitempty"`
	VoteAverage      *float64 `json:"vote_average,omitempty" url:"vote_average,omitempty"`
	VoteCount        *int     `json:"vote_count,omitempty" url:"vote_count,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountFavoriteTvResponseResultsItem) GetAdult() *bool {
	if a == nil {
		return nil
	}
	return a.Adult
}

func (a *AccountFavoriteTvResponseResultsItem) GetBackdropPath() *string {
	if a == nil {
		return nil
	}
	return a.BackdropPath
}

func (a *AccountFavoriteTvResponseResultsItem) GetGenreIds() []int {
	if a == nil {
		return nil
	}
	return a.GenreIds
}

func (a *AccountFavoriteTvResponseResultsItem) GetId() *int {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountFavoriteTvResponseResultsItem) GetOriginCountry() []string {
	if a == nil {
		return nil
	}
	return a.OriginCountry
}

func (a *AccountFavoriteTvResponseResultsItem) GetOriginalLanguage() *string {
	if a == nil {
		return nil
	}
	return a.OriginalLanguage
}

func (a *AccountFavoriteTvResponseResultsItem) GetOriginalName() *string {
	if a == nil {
		return nil
	}
	return a.OriginalName
}

func (a *AccountFavoriteTvResponseResultsItem) GetOverview() *string {
	if a == nil {
		return nil
	}
	return a.Overview
}

func (a *AccountFavoriteTvResponseResultsItem) GetPopularity() *float64 {
	if a == nil {
		return nil
	}
	return a.Popularity
}

func (a *AccountFavoriteTvResponseResultsItem) GetPosterPath() *string {
	if a == nil {
		return nil
	}
	return a.PosterPath
}

func (a *AccountFavoriteTvResponseResultsItem) GetFirstAirDate() *string {
	if a == nil {
		return nil
	}
	return a.FirstAirDate
}

func (a *AccountFavoriteTvResponseResultsItem) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AccountFavoriteTvResponseResultsItem) GetVoteAverage() *float64 {
	if a == nil {
		return nil
	}
	return a.VoteAverage
}

func (a *AccountFavoriteTvResponseResultsItem) GetVoteCount() *int {
	if a == nil {
		return nil
	}
	return a.VoteCount
}

func (a *AccountFavoriteTvResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountFavoriteTvResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountFavoriteTvResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountFavoriteTvResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountFavoriteTvResponseResultsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountListsResponse struct {
	Page         *int                               `json:"page,omitempty" url:"page,omitempty"`
	Results      []*AccountListsResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	TotalPages   *int                               `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	TotalResults *int                               `json:"total_results,omitempty" url:"total_results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountListsResponse) GetPage() *int {
	if a == nil {
		return nil
	}
	return a.Page
}

func (a *AccountListsResponse) GetResults() []*AccountListsResponseResultsItem {
	if a == nil {
		return nil
	}
	return a.Results
}

func (a *AccountListsResponse) GetTotalPages() *int {
	if a == nil {
		return nil
	}
	return a.TotalPages
}

func (a *AccountListsResponse) GetTotalResults() *int {
	if a == nil {
		return nil
	}
	return a.TotalResults
}

func (a *AccountListsResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountListsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountListsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountListsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountListsResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountListsResponseResultsItem struct {
	AccountObjectId *string  `json:"account_object_id,omitempty" url:"account_object_id,omitempty"`
	Adult           *int     `json:"adult,omitempty" url:"adult,omitempty"`
	AverageRating   *float64 `json:"average_rating,omitempty" url:"average_rating,omitempty"`
	CreatedAt       *string  `json:"created_at,omitempty" url:"created_at,omitempty"`
	Description     *string  `json:"description,omitempty" url:"description,omitempty"`
	Featured        *int     `json:"featured,omitempty" url:"featured,omitempty"`
	Id              *int     `json:"id,omitempty" url:"id,omitempty"`
	Iso31661        *string  `json:"iso_3166_1,omitempty" url:"iso_3166_1,omitempty"`
	Iso6391         *string  `json:"iso_639_1,omitempty" url:"iso_639_1,omitempty"`
	Name            *string  `json:"name,omitempty" url:"name,omitempty"`
	NumberOfItems   *int     `json:"number_of_items,omitempty" url:"number_of_items,omitempty"`
	Public          *int     `json:"public,omitempty" url:"public,omitempty"`
	Revenue         *string  `json:"revenue,omitempty" url:"revenue,omitempty"`
	Runtime         *int     `json:"runtime,omitempty" url:"runtime,omitempty"`
	SortBy          *int     `json:"sort_by,omitempty" url:"sort_by,omitempty"`
	UpdatedAt       *string  `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountListsResponseResultsItem) GetAccountObjectId() *string {
	if a == nil {
		return nil
	}
	return a.AccountObjectId
}

func (a *AccountListsResponseResultsItem) GetAdult() *int {
	if a == nil {
		return nil
	}
	return a.Adult
}

func (a *AccountListsResponseResultsItem) GetAverageRating() *float64 {
	if a == nil {
		return nil
	}
	return a.AverageRating
}

func (a *AccountListsResponseResultsItem) GetCreatedAt() *string {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AccountListsResponseResultsItem) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AccountListsResponseResultsItem) GetFeatured() *int {
	if a == nil {
		return nil
	}
	return a.Featured
}

func (a *AccountListsResponseResultsItem) GetId() *int {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountListsResponseResultsItem) GetIso31661() *string {
	if a == nil {
		return nil
	}
	return a.Iso31661
}

func (a *AccountListsResponseResultsItem) GetIso6391() *string {
	if a == nil {
		return nil
	}
	return a.Iso6391
}

func (a *AccountListsResponseResultsItem) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AccountListsResponseResultsItem) GetNumberOfItems() *int {
	if a == nil {
		return nil
	}
	return a.NumberOfItems
}

func (a *AccountListsResponseResultsItem) GetPublic() *int {
	if a == nil {
		return nil
	}
	return a.Public
}

func (a *AccountListsResponseResultsItem) GetRevenue() *string {
	if a == nil {
		return nil
	}
	return a.Revenue
}

func (a *AccountListsResponseResultsItem) GetRuntime() *int {
	if a == nil {
		return nil
	}
	return a.Runtime
}

func (a *AccountListsResponseResultsItem) GetSortBy() *int {
	if a == nil {
		return nil
	}
	return a.SortBy
}

func (a *AccountListsResponseResultsItem) GetUpdatedAt() *string {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AccountListsResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountListsResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountListsResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountListsResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountListsResponseResultsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountMovieRecommendationsResponse struct {
	Page         *int                                              `json:"page,omitempty" url:"page,omitempty"`
	Results      []*AccountMovieRecommendationsResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	TotalPages   *int                                              `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	TotalResults *int                                              `json:"total_results,omitempty" url:"total_results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountMovieRecommendationsResponse) GetPage() *int {
	if a == nil {
		return nil
	}
	return a.Page
}

func (a *AccountMovieRecommendationsResponse) GetResults() []*AccountMovieRecommendationsResponseResultsItem {
	if a == nil {
		return nil
	}
	return a.Results
}

func (a *AccountMovieRecommendationsResponse) GetTotalPages() *int {
	if a == nil {
		return nil
	}
	return a.TotalPages
}

func (a *AccountMovieRecommendationsResponse) GetTotalResults() *int {
	if a == nil {
		return nil
	}
	return a.TotalResults
}

func (a *AccountMovieRecommendationsResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountMovieRecommendationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountMovieRecommendationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountMovieRecommendationsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountMovieRecommendationsResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountMovieRecommendationsResponseResultsItem struct {
	Adult            *bool    `json:"adult,omitempty" url:"adult,omitempty"`
	BackdropPath     *string  `json:"backdrop_path,omitempty" url:"backdrop_path,omitempty"`
	Id               *int     `json:"id,omitempty" url:"id,omitempty"`
	Title            *string  `json:"title,omitempty" url:"title,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty" url:"original_language,omitempty"`
	OriginalTitle    *string  `json:"original_title,omitempty" url:"original_title,omitempty"`
	Overview         *string  `json:"overview,omitempty" url:"overview,omitempty"`
	PosterPath       *string  `json:"poster_path,omitempty" url:"poster_path,omitempty"`
	MediaType        *string  `json:"media_type,omitempty" url:"media_type,omitempty"`
	GenreIds         []int    `json:"genre_ids,omitempty" url:"genre_ids,omitempty"`
	Popularity       *float64 `json:"popularity,omitempty" url:"popularity,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty" url:"release_date,omitempty"`
	Video            *bool    `json:"video,omitempty" url:"video,omitempty"`
	VoteAverage      *float64 `json:"vote_average,omitempty" url:"vote_average,omitempty"`
	VoteCount        *int     `json:"vote_count,omitempty" url:"vote_count,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetAdult() *bool {
	if a == nil {
		return nil
	}
	return a.Adult
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetBackdropPath() *string {
	if a == nil {
		return nil
	}
	return a.BackdropPath
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetId() *int {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetTitle() *string {
	if a == nil {
		return nil
	}
	return a.Title
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetOriginalLanguage() *string {
	if a == nil {
		return nil
	}
	return a.OriginalLanguage
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetOriginalTitle() *string {
	if a == nil {
		return nil
	}
	return a.OriginalTitle
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetOverview() *string {
	if a == nil {
		return nil
	}
	return a.Overview
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetPosterPath() *string {
	if a == nil {
		return nil
	}
	return a.PosterPath
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetMediaType() *string {
	if a == nil {
		return nil
	}
	return a.MediaType
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetGenreIds() []int {
	if a == nil {
		return nil
	}
	return a.GenreIds
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetPopularity() *float64 {
	if a == nil {
		return nil
	}
	return a.Popularity
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetReleaseDate() *string {
	if a == nil {
		return nil
	}
	return a.ReleaseDate
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetVideo() *bool {
	if a == nil {
		return nil
	}
	return a.Video
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetVoteAverage() *float64 {
	if a == nil {
		return nil
	}
	return a.VoteAverage
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetVoteCount() *int {
	if a == nil {
		return nil
	}
	return a.VoteCount
}

func (a *AccountMovieRecommendationsResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountMovieRecommendationsResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountMovieRecommendationsResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountMovieRecommendationsResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountMovieRecommendationsResponseResultsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountMovieWatchlistRequestSortBy string

const (
	AccountMovieWatchlistRequestSortByCreatedAtAsc  AccountMovieWatchlistRequestSortBy = "created_at.asc"
	AccountMovieWatchlistRequestSortByCreatedAtDesc AccountMovieWatchlistRequestSortBy = "created_at.desc"
)

func NewAccountMovieWatchlistRequestSortByFromString(s string) (AccountMovieWatchlistRequestSortBy, error) {
	switch s {
	case "created_at.asc":
		return AccountMovieWatchlistRequestSortByCreatedAtAsc, nil
	case "created_at.desc":
		return AccountMovieWatchlistRequestSortByCreatedAtDesc, nil
	}
	var t AccountMovieWatchlistRequestSortBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountMovieWatchlistRequestSortBy) Ptr() *AccountMovieWatchlistRequestSortBy {
	return &a
}

type AccountMovieWatchlistResponse struct {
	Page         *int                                        `json:"page,omitempty" url:"page,omitempty"`
	Results      []*AccountMovieWatchlistResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	TotalPages   *int                                        `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	TotalResults *int                                        `json:"total_results,omitempty" url:"total_results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountMovieWatchlistResponse) GetPage() *int {
	if a == nil {
		return nil
	}
	return a.Page
}

func (a *AccountMovieWatchlistResponse) GetResults() []*AccountMovieWatchlistResponseResultsItem {
	if a == nil {
		return nil
	}
	return a.Results
}

func (a *AccountMovieWatchlistResponse) GetTotalPages() *int {
	if a == nil {
		return nil
	}
	return a.TotalPages
}

func (a *AccountMovieWatchlistResponse) GetTotalResults() *int {
	if a == nil {
		return nil
	}
	return a.TotalResults
}

func (a *AccountMovieWatchlistResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountMovieWatchlistResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountMovieWatchlistResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountMovieWatchlistResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountMovieWatchlistResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountMovieWatchlistResponseResultsItem struct {
	Adult            *bool    `json:"adult,omitempty" url:"adult,omitempty"`
	BackdropPath     *string  `json:"backdrop_path,omitempty" url:"backdrop_path,omitempty"`
	Id               *int     `json:"id,omitempty" url:"id,omitempty"`
	Title            *string  `json:"title,omitempty" url:"title,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty" url:"original_language,omitempty"`
	OriginalTitle    *string  `json:"original_title,omitempty" url:"original_title,omitempty"`
	Overview         *string  `json:"overview,omitempty" url:"overview,omitempty"`
	PosterPath       *string  `json:"poster_path,omitempty" url:"poster_path,omitempty"`
	MediaType        *string  `json:"media_type,omitempty" url:"media_type,omitempty"`
	GenreIds         []int    `json:"genre_ids,omitempty" url:"genre_ids,omitempty"`
	Popularity       *float64 `json:"popularity,omitempty" url:"popularity,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty" url:"release_date,omitempty"`
	Video            *bool    `json:"video,omitempty" url:"video,omitempty"`
	VoteAverage      *float64 `json:"vote_average,omitempty" url:"vote_average,omitempty"`
	VoteCount        *int     `json:"vote_count,omitempty" url:"vote_count,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountMovieWatchlistResponseResultsItem) GetAdult() *bool {
	if a == nil {
		return nil
	}
	return a.Adult
}

func (a *AccountMovieWatchlistResponseResultsItem) GetBackdropPath() *string {
	if a == nil {
		return nil
	}
	return a.BackdropPath
}

func (a *AccountMovieWatchlistResponseResultsItem) GetId() *int {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountMovieWatchlistResponseResultsItem) GetTitle() *string {
	if a == nil {
		return nil
	}
	return a.Title
}

func (a *AccountMovieWatchlistResponseResultsItem) GetOriginalLanguage() *string {
	if a == nil {
		return nil
	}
	return a.OriginalLanguage
}

func (a *AccountMovieWatchlistResponseResultsItem) GetOriginalTitle() *string {
	if a == nil {
		return nil
	}
	return a.OriginalTitle
}

func (a *AccountMovieWatchlistResponseResultsItem) GetOverview() *string {
	if a == nil {
		return nil
	}
	return a.Overview
}

func (a *AccountMovieWatchlistResponseResultsItem) GetPosterPath() *string {
	if a == nil {
		return nil
	}
	return a.PosterPath
}

func (a *AccountMovieWatchlistResponseResultsItem) GetMediaType() *string {
	if a == nil {
		return nil
	}
	return a.MediaType
}

func (a *AccountMovieWatchlistResponseResultsItem) GetGenreIds() []int {
	if a == nil {
		return nil
	}
	return a.GenreIds
}

func (a *AccountMovieWatchlistResponseResultsItem) GetPopularity() *float64 {
	if a == nil {
		return nil
	}
	return a.Popularity
}

func (a *AccountMovieWatchlistResponseResultsItem) GetReleaseDate() *string {
	if a == nil {
		return nil
	}
	return a.ReleaseDate
}

func (a *AccountMovieWatchlistResponseResultsItem) GetVideo() *bool {
	if a == nil {
		return nil
	}
	return a.Video
}

func (a *AccountMovieWatchlistResponseResultsItem) GetVoteAverage() *float64 {
	if a == nil {
		return nil
	}
	return a.VoteAverage
}

func (a *AccountMovieWatchlistResponseResultsItem) GetVoteCount() *int {
	if a == nil {
		return nil
	}
	return a.VoteCount
}

func (a *AccountMovieWatchlistResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountMovieWatchlistResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountMovieWatchlistResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountMovieWatchlistResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountMovieWatchlistResponseResultsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountRatedMoviesRequestSortBy string

const (
	AccountRatedMoviesRequestSortByCreatedAtAsc  AccountRatedMoviesRequestSortBy = "created_at.asc"
	AccountRatedMoviesRequestSortByCreatedAtDesc AccountRatedMoviesRequestSortBy = "created_at.desc"
)

func NewAccountRatedMoviesRequestSortByFromString(s string) (AccountRatedMoviesRequestSortBy, error) {
	switch s {
	case "created_at.asc":
		return AccountRatedMoviesRequestSortByCreatedAtAsc, nil
	case "created_at.desc":
		return AccountRatedMoviesRequestSortByCreatedAtDesc, nil
	}
	var t AccountRatedMoviesRequestSortBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountRatedMoviesRequestSortBy) Ptr() *AccountRatedMoviesRequestSortBy {
	return &a
}

type AccountRatedMoviesResponse struct {
	Page         *int                                     `json:"page,omitempty" url:"page,omitempty"`
	Results      []*AccountRatedMoviesResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	TotalPages   *int                                     `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	TotalResults *int                                     `json:"total_results,omitempty" url:"total_results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountRatedMoviesResponse) GetPage() *int {
	if a == nil {
		return nil
	}
	return a.Page
}

func (a *AccountRatedMoviesResponse) GetResults() []*AccountRatedMoviesResponseResultsItem {
	if a == nil {
		return nil
	}
	return a.Results
}

func (a *AccountRatedMoviesResponse) GetTotalPages() *int {
	if a == nil {
		return nil
	}
	return a.TotalPages
}

func (a *AccountRatedMoviesResponse) GetTotalResults() *int {
	if a == nil {
		return nil
	}
	return a.TotalResults
}

func (a *AccountRatedMoviesResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountRatedMoviesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountRatedMoviesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountRatedMoviesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountRatedMoviesResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountRatedMoviesResponseResultsItem struct {
	Adult            *bool                                               `json:"adult,omitempty" url:"adult,omitempty"`
	BackdropPath     *string                                             `json:"backdrop_path,omitempty" url:"backdrop_path,omitempty"`
	GenreIds         []int                                               `json:"genre_ids,omitempty" url:"genre_ids,omitempty"`
	Id               *int                                                `json:"id,omitempty" url:"id,omitempty"`
	OriginalLanguage *string                                             `json:"original_language,omitempty" url:"original_language,omitempty"`
	OriginalTitle    *string                                             `json:"original_title,omitempty" url:"original_title,omitempty"`
	Overview         *string                                             `json:"overview,omitempty" url:"overview,omitempty"`
	Popularity       *float64                                            `json:"popularity,omitempty" url:"popularity,omitempty"`
	PosterPath       *string                                             `json:"poster_path,omitempty" url:"poster_path,omitempty"`
	ReleaseDate      *string                                             `json:"release_date,omitempty" url:"release_date,omitempty"`
	Title            *string                                             `json:"title,omitempty" url:"title,omitempty"`
	Video            *bool                                               `json:"video,omitempty" url:"video,omitempty"`
	VoteAverage      *float64                                            `json:"vote_average,omitempty" url:"vote_average,omitempty"`
	VoteCount        *int                                                `json:"vote_count,omitempty" url:"vote_count,omitempty"`
	AccountRating    *AccountRatedMoviesResponseResultsItemAccountRating `json:"account_rating,omitempty" url:"account_rating,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountRatedMoviesResponseResultsItem) GetAdult() *bool {
	if a == nil {
		return nil
	}
	return a.Adult
}

func (a *AccountRatedMoviesResponseResultsItem) GetBackdropPath() *string {
	if a == nil {
		return nil
	}
	return a.BackdropPath
}

func (a *AccountRatedMoviesResponseResultsItem) GetGenreIds() []int {
	if a == nil {
		return nil
	}
	return a.GenreIds
}

func (a *AccountRatedMoviesResponseResultsItem) GetId() *int {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountRatedMoviesResponseResultsItem) GetOriginalLanguage() *string {
	if a == nil {
		return nil
	}
	return a.OriginalLanguage
}

func (a *AccountRatedMoviesResponseResultsItem) GetOriginalTitle() *string {
	if a == nil {
		return nil
	}
	return a.OriginalTitle
}

func (a *AccountRatedMoviesResponseResultsItem) GetOverview() *string {
	if a == nil {
		return nil
	}
	return a.Overview
}

func (a *AccountRatedMoviesResponseResultsItem) GetPopularity() *float64 {
	if a == nil {
		return nil
	}
	return a.Popularity
}

func (a *AccountRatedMoviesResponseResultsItem) GetPosterPath() *string {
	if a == nil {
		return nil
	}
	return a.PosterPath
}

func (a *AccountRatedMoviesResponseResultsItem) GetReleaseDate() *string {
	if a == nil {
		return nil
	}
	return a.ReleaseDate
}

func (a *AccountRatedMoviesResponseResultsItem) GetTitle() *string {
	if a == nil {
		return nil
	}
	return a.Title
}

func (a *AccountRatedMoviesResponseResultsItem) GetVideo() *bool {
	if a == nil {
		return nil
	}
	return a.Video
}

func (a *AccountRatedMoviesResponseResultsItem) GetVoteAverage() *float64 {
	if a == nil {
		return nil
	}
	return a.VoteAverage
}

func (a *AccountRatedMoviesResponseResultsItem) GetVoteCount() *int {
	if a == nil {
		return nil
	}
	return a.VoteCount
}

func (a *AccountRatedMoviesResponseResultsItem) GetAccountRating() *AccountRatedMoviesResponseResultsItemAccountRating {
	if a == nil {
		return nil
	}
	return a.AccountRating
}

func (a *AccountRatedMoviesResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountRatedMoviesResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountRatedMoviesResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountRatedMoviesResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountRatedMoviesResponseResultsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountRatedMoviesResponseResultsItemAccountRating struct {
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	Value     *int    `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountRatedMoviesResponseResultsItemAccountRating) GetCreatedAt() *string {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AccountRatedMoviesResponseResultsItemAccountRating) GetValue() *int {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AccountRatedMoviesResponseResultsItemAccountRating) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountRatedMoviesResponseResultsItemAccountRating) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountRatedMoviesResponseResultsItemAccountRating
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountRatedMoviesResponseResultsItemAccountRating(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountRatedMoviesResponseResultsItemAccountRating) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountRatedTvRequestSortBy string

const (
	AccountRatedTvRequestSortByCreatedAtAsc  AccountRatedTvRequestSortBy = "created_at.asc"
	AccountRatedTvRequestSortByCreatedAtDesc AccountRatedTvRequestSortBy = "created_at.desc"
)

func NewAccountRatedTvRequestSortByFromString(s string) (AccountRatedTvRequestSortBy, error) {
	switch s {
	case "created_at.asc":
		return AccountRatedTvRequestSortByCreatedAtAsc, nil
	case "created_at.desc":
		return AccountRatedTvRequestSortByCreatedAtDesc, nil
	}
	var t AccountRatedTvRequestSortBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountRatedTvRequestSortBy) Ptr() *AccountRatedTvRequestSortBy {
	return &a
}

type AccountRatedTvResponse struct {
	Page         *int                                 `json:"page,omitempty" url:"page,omitempty"`
	Results      []*AccountRatedTvResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	TotalPages   *int                                 `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	TotalResults *int                                 `json:"total_results,omitempty" url:"total_results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountRatedTvResponse) GetPage() *int {
	if a == nil {
		return nil
	}
	return a.Page
}

func (a *AccountRatedTvResponse) GetResults() []*AccountRatedTvResponseResultsItem {
	if a == nil {
		return nil
	}
	return a.Results
}

func (a *AccountRatedTvResponse) GetTotalPages() *int {
	if a == nil {
		return nil
	}
	return a.TotalPages
}

func (a *AccountRatedTvResponse) GetTotalResults() *int {
	if a == nil {
		return nil
	}
	return a.TotalResults
}

func (a *AccountRatedTvResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountRatedTvResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountRatedTvResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountRatedTvResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountRatedTvResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountRatedTvResponseResultsItem struct {
	Adult            *bool                                           `json:"adult,omitempty" url:"adult,omitempty"`
	BackdropPath     *string                                         `json:"backdrop_path,omitempty" url:"backdrop_path,omitempty"`
	GenreIds         []int                                           `json:"genre_ids,omitempty" url:"genre_ids,omitempty"`
	Id               *int                                            `json:"id,omitempty" url:"id,omitempty"`
	OriginCountry    []string                                        `json:"origin_country,omitempty" url:"origin_country,omitempty"`
	OriginalLanguage *string                                         `json:"original_language,omitempty" url:"original_language,omitempty"`
	OriginalName     *string                                         `json:"original_name,omitempty" url:"original_name,omitempty"`
	Overview         *string                                         `json:"overview,omitempty" url:"overview,omitempty"`
	Popularity       *float64                                        `json:"popularity,omitempty" url:"popularity,omitempty"`
	PosterPath       *string                                         `json:"poster_path,omitempty" url:"poster_path,omitempty"`
	FirstAirDate     *string                                         `json:"first_air_date,omitempty" url:"first_air_date,omitempty"`
	Name             *string                                         `json:"name,omitempty" url:"name,omitempty"`
	VoteAverage      *float64                                        `json:"vote_average,omitempty" url:"vote_average,omitempty"`
	VoteCount        *int                                            `json:"vote_count,omitempty" url:"vote_count,omitempty"`
	AccountRating    *AccountRatedTvResponseResultsItemAccountRating `json:"account_rating,omitempty" url:"account_rating,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountRatedTvResponseResultsItem) GetAdult() *bool {
	if a == nil {
		return nil
	}
	return a.Adult
}

func (a *AccountRatedTvResponseResultsItem) GetBackdropPath() *string {
	if a == nil {
		return nil
	}
	return a.BackdropPath
}

func (a *AccountRatedTvResponseResultsItem) GetGenreIds() []int {
	if a == nil {
		return nil
	}
	return a.GenreIds
}

func (a *AccountRatedTvResponseResultsItem) GetId() *int {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountRatedTvResponseResultsItem) GetOriginCountry() []string {
	if a == nil {
		return nil
	}
	return a.OriginCountry
}

func (a *AccountRatedTvResponseResultsItem) GetOriginalLanguage() *string {
	if a == nil {
		return nil
	}
	return a.OriginalLanguage
}

func (a *AccountRatedTvResponseResultsItem) GetOriginalName() *string {
	if a == nil {
		return nil
	}
	return a.OriginalName
}

func (a *AccountRatedTvResponseResultsItem) GetOverview() *string {
	if a == nil {
		return nil
	}
	return a.Overview
}

func (a *AccountRatedTvResponseResultsItem) GetPopularity() *float64 {
	if a == nil {
		return nil
	}
	return a.Popularity
}

func (a *AccountRatedTvResponseResultsItem) GetPosterPath() *string {
	if a == nil {
		return nil
	}
	return a.PosterPath
}

func (a *AccountRatedTvResponseResultsItem) GetFirstAirDate() *string {
	if a == nil {
		return nil
	}
	return a.FirstAirDate
}

func (a *AccountRatedTvResponseResultsItem) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AccountRatedTvResponseResultsItem) GetVoteAverage() *float64 {
	if a == nil {
		return nil
	}
	return a.VoteAverage
}

func (a *AccountRatedTvResponseResultsItem) GetVoteCount() *int {
	if a == nil {
		return nil
	}
	return a.VoteCount
}

func (a *AccountRatedTvResponseResultsItem) GetAccountRating() *AccountRatedTvResponseResultsItemAccountRating {
	if a == nil {
		return nil
	}
	return a.AccountRating
}

func (a *AccountRatedTvResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountRatedTvResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountRatedTvResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountRatedTvResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountRatedTvResponseResultsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountRatedTvResponseResultsItemAccountRating struct {
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	Value     *int    `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountRatedTvResponseResultsItemAccountRating) GetCreatedAt() *string {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AccountRatedTvResponseResultsItemAccountRating) GetValue() *int {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AccountRatedTvResponseResultsItemAccountRating) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountRatedTvResponseResultsItemAccountRating) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountRatedTvResponseResultsItemAccountRating
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountRatedTvResponseResultsItemAccountRating(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountRatedTvResponseResultsItemAccountRating) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountTvRecommendationsResponse struct {
	Page         *int                                           `json:"page,omitempty" url:"page,omitempty"`
	Results      []*AccountTvRecommendationsResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	TotalPages   *int                                           `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	TotalResults *int                                           `json:"total_results,omitempty" url:"total_results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountTvRecommendationsResponse) GetPage() *int {
	if a == nil {
		return nil
	}
	return a.Page
}

func (a *AccountTvRecommendationsResponse) GetResults() []*AccountTvRecommendationsResponseResultsItem {
	if a == nil {
		return nil
	}
	return a.Results
}

func (a *AccountTvRecommendationsResponse) GetTotalPages() *int {
	if a == nil {
		return nil
	}
	return a.TotalPages
}

func (a *AccountTvRecommendationsResponse) GetTotalResults() *int {
	if a == nil {
		return nil
	}
	return a.TotalResults
}

func (a *AccountTvRecommendationsResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountTvRecommendationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountTvRecommendationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountTvRecommendationsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountTvRecommendationsResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountTvRecommendationsResponseResultsItem struct {
	Adult            *bool    `json:"adult,omitempty" url:"adult,omitempty"`
	BackdropPath     *string  `json:"backdrop_path,omitempty" url:"backdrop_path,omitempty"`
	Id               *int     `json:"id,omitempty" url:"id,omitempty"`
	Name             *string  `json:"name,omitempty" url:"name,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty" url:"original_language,omitempty"`
	OriginalName     *string  `json:"original_name,omitempty" url:"original_name,omitempty"`
	Overview         *string  `json:"overview,omitempty" url:"overview,omitempty"`
	PosterPath       *string  `json:"poster_path,omitempty" url:"poster_path,omitempty"`
	MediaType        *string  `json:"media_type,omitempty" url:"media_type,omitempty"`
	GenreIds         []int    `json:"genre_ids,omitempty" url:"genre_ids,omitempty"`
	Popularity       *float64 `json:"popularity,omitempty" url:"popularity,omitempty"`
	FirstAirDate     *string  `json:"first_air_date,omitempty" url:"first_air_date,omitempty"`
	VoteAverage      *float64 `json:"vote_average,omitempty" url:"vote_average,omitempty"`
	VoteCount        *int     `json:"vote_count,omitempty" url:"vote_count,omitempty"`
	OriginCountry    []string `json:"origin_country,omitempty" url:"origin_country,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountTvRecommendationsResponseResultsItem) GetAdult() *bool {
	if a == nil {
		return nil
	}
	return a.Adult
}

func (a *AccountTvRecommendationsResponseResultsItem) GetBackdropPath() *string {
	if a == nil {
		return nil
	}
	return a.BackdropPath
}

func (a *AccountTvRecommendationsResponseResultsItem) GetId() *int {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountTvRecommendationsResponseResultsItem) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AccountTvRecommendationsResponseResultsItem) GetOriginalLanguage() *string {
	if a == nil {
		return nil
	}
	return a.OriginalLanguage
}

func (a *AccountTvRecommendationsResponseResultsItem) GetOriginalName() *string {
	if a == nil {
		return nil
	}
	return a.OriginalName
}

func (a *AccountTvRecommendationsResponseResultsItem) GetOverview() *string {
	if a == nil {
		return nil
	}
	return a.Overview
}

func (a *AccountTvRecommendationsResponseResultsItem) GetPosterPath() *string {
	if a == nil {
		return nil
	}
	return a.PosterPath
}

func (a *AccountTvRecommendationsResponseResultsItem) GetMediaType() *string {
	if a == nil {
		return nil
	}
	return a.MediaType
}

func (a *AccountTvRecommendationsResponseResultsItem) GetGenreIds() []int {
	if a == nil {
		return nil
	}
	return a.GenreIds
}

func (a *AccountTvRecommendationsResponseResultsItem) GetPopularity() *float64 {
	if a == nil {
		return nil
	}
	return a.Popularity
}

func (a *AccountTvRecommendationsResponseResultsItem) GetFirstAirDate() *string {
	if a == nil {
		return nil
	}
	return a.FirstAirDate
}

func (a *AccountTvRecommendationsResponseResultsItem) GetVoteAverage() *float64 {
	if a == nil {
		return nil
	}
	return a.VoteAverage
}

func (a *AccountTvRecommendationsResponseResultsItem) GetVoteCount() *int {
	if a == nil {
		return nil
	}
	return a.VoteCount
}

func (a *AccountTvRecommendationsResponseResultsItem) GetOriginCountry() []string {
	if a == nil {
		return nil
	}
	return a.OriginCountry
}

func (a *AccountTvRecommendationsResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountTvRecommendationsResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountTvRecommendationsResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountTvRecommendationsResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountTvRecommendationsResponseResultsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountTvWatchlistRequestSortBy string

const (
	AccountTvWatchlistRequestSortByCreatedAtAsc  AccountTvWatchlistRequestSortBy = "created_at.asc"
	AccountTvWatchlistRequestSortByCreatedAtDesc AccountTvWatchlistRequestSortBy = "created_at.desc"
)

func NewAccountTvWatchlistRequestSortByFromString(s string) (AccountTvWatchlistRequestSortBy, error) {
	switch s {
	case "created_at.asc":
		return AccountTvWatchlistRequestSortByCreatedAtAsc, nil
	case "created_at.desc":
		return AccountTvWatchlistRequestSortByCreatedAtDesc, nil
	}
	var t AccountTvWatchlistRequestSortBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccountTvWatchlistRequestSortBy) Ptr() *AccountTvWatchlistRequestSortBy {
	return &a
}

type AccountTvWatchlistResponse struct {
	Page         *int                                     `json:"page,omitempty" url:"page,omitempty"`
	Results      []*AccountTvWatchlistResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	TotalPages   *int                                     `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	TotalResults *int                                     `json:"total_results,omitempty" url:"total_results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountTvWatchlistResponse) GetPage() *int {
	if a == nil {
		return nil
	}
	return a.Page
}

func (a *AccountTvWatchlistResponse) GetResults() []*AccountTvWatchlistResponseResultsItem {
	if a == nil {
		return nil
	}
	return a.Results
}

func (a *AccountTvWatchlistResponse) GetTotalPages() *int {
	if a == nil {
		return nil
	}
	return a.TotalPages
}

func (a *AccountTvWatchlistResponse) GetTotalResults() *int {
	if a == nil {
		return nil
	}
	return a.TotalResults
}

func (a *AccountTvWatchlistResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountTvWatchlistResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountTvWatchlistResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountTvWatchlistResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountTvWatchlistResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccountTvWatchlistResponseResultsItem struct {
	Adult            *bool    `json:"adult,omitempty" url:"adult,omitempty"`
	BackdropPath     *string  `json:"backdrop_path,omitempty" url:"backdrop_path,omitempty"`
	Id               *int     `json:"id,omitempty" url:"id,omitempty"`
	Name             *string  `json:"name,omitempty" url:"name,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty" url:"original_language,omitempty"`
	OriginalName     *string  `json:"original_name,omitempty" url:"original_name,omitempty"`
	Overview         *string  `json:"overview,omitempty" url:"overview,omitempty"`
	PosterPath       *string  `json:"poster_path,omitempty" url:"poster_path,omitempty"`
	MediaType        *string  `json:"media_type,omitempty" url:"media_type,omitempty"`
	GenreIds         []int    `json:"genre_ids,omitempty" url:"genre_ids,omitempty"`
	Popularity       *float64 `json:"popularity,omitempty" url:"popularity,omitempty"`
	FirstAirDate     *string  `json:"first_air_date,omitempty" url:"first_air_date,omitempty"`
	VoteAverage      *float64 `json:"vote_average,omitempty" url:"vote_average,omitempty"`
	VoteCount        *int     `json:"vote_count,omitempty" url:"vote_count,omitempty"`
	OriginCountry    []string `json:"origin_country,omitempty" url:"origin_country,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AccountTvWatchlistResponseResultsItem) GetAdult() *bool {
	if a == nil {
		return nil
	}
	return a.Adult
}

func (a *AccountTvWatchlistResponseResultsItem) GetBackdropPath() *string {
	if a == nil {
		return nil
	}
	return a.BackdropPath
}

func (a *AccountTvWatchlistResponseResultsItem) GetId() *int {
	if a == nil {
		return nil
	}
	return a.Id
}

func (a *AccountTvWatchlistResponseResultsItem) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AccountTvWatchlistResponseResultsItem) GetOriginalLanguage() *string {
	if a == nil {
		return nil
	}
	return a.OriginalLanguage
}

func (a *AccountTvWatchlistResponseResultsItem) GetOriginalName() *string {
	if a == nil {
		return nil
	}
	return a.OriginalName
}

func (a *AccountTvWatchlistResponseResultsItem) GetOverview() *string {
	if a == nil {
		return nil
	}
	return a.Overview
}

func (a *AccountTvWatchlistResponseResultsItem) GetPosterPath() *string {
	if a == nil {
		return nil
	}
	return a.PosterPath
}

func (a *AccountTvWatchlistResponseResultsItem) GetMediaType() *string {
	if a == nil {
		return nil
	}
	return a.MediaType
}

func (a *AccountTvWatchlistResponseResultsItem) GetGenreIds() []int {
	if a == nil {
		return nil
	}
	return a.GenreIds
}

func (a *AccountTvWatchlistResponseResultsItem) GetPopularity() *float64 {
	if a == nil {
		return nil
	}
	return a.Popularity
}

func (a *AccountTvWatchlistResponseResultsItem) GetFirstAirDate() *string {
	if a == nil {
		return nil
	}
	return a.FirstAirDate
}

func (a *AccountTvWatchlistResponseResultsItem) GetVoteAverage() *float64 {
	if a == nil {
		return nil
	}
	return a.VoteAverage
}

func (a *AccountTvWatchlistResponseResultsItem) GetVoteCount() *int {
	if a == nil {
		return nil
	}
	return a.VoteCount
}

func (a *AccountTvWatchlistResponseResultsItem) GetOriginCountry() []string {
	if a == nil {
		return nil
	}
	return a.OriginCountry
}

func (a *AccountTvWatchlistResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AccountTvWatchlistResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AccountTvWatchlistResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccountTvWatchlistResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccountTvWatchlistResponseResultsItem) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuthCreateAccessTokenResponse struct {
	AccountId     *string `json:"account_id,omitempty" url:"account_id,omitempty"`
	AccessToken   *string `json:"access_token,omitempty" url:"access_token,omitempty"`
	Success       *bool   `json:"success,omitempty" url:"success,omitempty"`
	StatusMessage *string `json:"status_message,omitempty" url:"status_message,omitempty"`
	StatusCode    *int    `json:"status_code,omitempty" url:"status_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthCreateAccessTokenResponse) GetAccountId() *string {
	if a == nil {
		return nil
	}
	return a.AccountId
}

func (a *AuthCreateAccessTokenResponse) GetAccessToken() *string {
	if a == nil {
		return nil
	}
	return a.AccessToken
}

func (a *AuthCreateAccessTokenResponse) GetSuccess() *bool {
	if a == nil {
		return nil
	}
	return a.Success
}

func (a *AuthCreateAccessTokenResponse) GetStatusMessage() *string {
	if a == nil {
		return nil
	}
	return a.StatusMessage
}

func (a *AuthCreateAccessTokenResponse) GetStatusCode() *int {
	if a == nil {
		return nil
	}
	return a.StatusCode
}

func (a *AuthCreateAccessTokenResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthCreateAccessTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthCreateAccessTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthCreateAccessTokenResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthCreateAccessTokenResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuthCreateRequestTokenResponse struct {
	StatusMessage *string `json:"status_message,omitempty" url:"status_message,omitempty"`
	RequestToken  *string `json:"request_token,omitempty" url:"request_token,omitempty"`
	Success       *bool   `json:"success,omitempty" url:"success,omitempty"`
	StatusCode    *int    `json:"status_code,omitempty" url:"status_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthCreateRequestTokenResponse) GetStatusMessage() *string {
	if a == nil {
		return nil
	}
	return a.StatusMessage
}

func (a *AuthCreateRequestTokenResponse) GetRequestToken() *string {
	if a == nil {
		return nil
	}
	return a.RequestToken
}

func (a *AuthCreateRequestTokenResponse) GetSuccess() *bool {
	if a == nil {
		return nil
	}
	return a.Success
}

func (a *AuthCreateRequestTokenResponse) GetStatusCode() *int {
	if a == nil {
		return nil
	}
	return a.StatusCode
}

func (a *AuthCreateRequestTokenResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthCreateRequestTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthCreateRequestTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthCreateRequestTokenResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthCreateRequestTokenResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuthLogoutResponse struct {
	StatusMessage *string `json:"status_message,omitempty" url:"status_message,omitempty"`
	Success       *bool   `json:"success,omitempty" url:"success,omitempty"`
	StatusCode    *int    `json:"status_code,omitempty" url:"status_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AuthLogoutResponse) GetStatusMessage() *string {
	if a == nil {
		return nil
	}
	return a.StatusMessage
}

func (a *AuthLogoutResponse) GetSuccess() *bool {
	if a == nil {
		return nil
	}
	return a.Success
}

func (a *AuthLogoutResponse) GetStatusCode() *int {
	if a == nil {
		return nil
	}
	return a.StatusCode
}

func (a *AuthLogoutResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthLogoutResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthLogoutResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthLogoutResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthLogoutResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ListAddItemsResponse struct {
	StatusMessage *string                            `json:"status_message,omitempty" url:"status_message,omitempty"`
	Results       []*ListAddItemsResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	Success       *bool                              `json:"success,omitempty" url:"success,omitempty"`
	StatusCode    *int                               `json:"status_code,omitempty" url:"status_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListAddItemsResponse) GetStatusMessage() *string {
	if l == nil {
		return nil
	}
	return l.StatusMessage
}

func (l *ListAddItemsResponse) GetResults() []*ListAddItemsResponseResultsItem {
	if l == nil {
		return nil
	}
	return l.Results
}

func (l *ListAddItemsResponse) GetSuccess() *bool {
	if l == nil {
		return nil
	}
	return l.Success
}

func (l *ListAddItemsResponse) GetStatusCode() *int {
	if l == nil {
		return nil
	}
	return l.StatusCode
}

func (l *ListAddItemsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAddItemsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAddItemsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAddItemsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAddItemsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListAddItemsResponseResultsItem struct {
	MediaType *string `json:"media_type,omitempty" url:"media_type,omitempty"`
	MediaId   *int    `json:"media_id,omitempty" url:"media_id,omitempty"`
	Success   *bool   `json:"success,omitempty" url:"success,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListAddItemsResponseResultsItem) GetMediaType() *string {
	if l == nil {
		return nil
	}
	return l.MediaType
}

func (l *ListAddItemsResponseResultsItem) GetMediaId() *int {
	if l == nil {
		return nil
	}
	return l.MediaId
}

func (l *ListAddItemsResponseResultsItem) GetSuccess() *bool {
	if l == nil {
		return nil
	}
	return l.Success
}

func (l *ListAddItemsResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAddItemsResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAddItemsResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAddItemsResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAddItemsResponseResultsItem) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListClearResponse struct {
	ItemsDeleted  *int    `json:"items_deleted,omitempty" url:"items_deleted,omitempty"`
	StatusMessage *string `json:"status_message,omitempty" url:"status_message,omitempty"`
	Id            *int    `json:"id,omitempty" url:"id,omitempty"`
	StatusCode    *int    `json:"status_code,omitempty" url:"status_code,omitempty"`
	Success       *bool   `json:"success,omitempty" url:"success,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListClearResponse) GetItemsDeleted() *int {
	if l == nil {
		return nil
	}
	return l.ItemsDeleted
}

func (l *ListClearResponse) GetStatusMessage() *string {
	if l == nil {
		return nil
	}
	return l.StatusMessage
}

func (l *ListClearResponse) GetId() *int {
	if l == nil {
		return nil
	}
	return l.Id
}

func (l *ListClearResponse) GetStatusCode() *int {
	if l == nil {
		return nil
	}
	return l.StatusCode
}

func (l *ListClearResponse) GetSuccess() *bool {
	if l == nil {
		return nil
	}
	return l.Success
}

func (l *ListClearResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListClearResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListClearResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListClearResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListClearResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListCreateResponse struct {
	StatusMessage *string `json:"status_message,omitempty" url:"status_message,omitempty"`
	Id            *int    `json:"id,omitempty" url:"id,omitempty"`
	Success       *bool   `json:"success,omitempty" url:"success,omitempty"`
	StatusCode    *int    `json:"status_code,omitempty" url:"status_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCreateResponse) GetStatusMessage() *string {
	if l == nil {
		return nil
	}
	return l.StatusMessage
}

func (l *ListCreateResponse) GetId() *int {
	if l == nil {
		return nil
	}
	return l.Id
}

func (l *ListCreateResponse) GetSuccess() *bool {
	if l == nil {
		return nil
	}
	return l.Success
}

func (l *ListCreateResponse) GetStatusCode() *int {
	if l == nil {
		return nil
	}
	return l.StatusCode
}

func (l *ListCreateResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCreateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCreateResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListDeleteResponse struct {
	StatusMessage *string `json:"status_message,omitempty" url:"status_message,omitempty"`
	Success       *bool   `json:"success,omitempty" url:"success,omitempty"`
	StatusCode    *int    `json:"status_code,omitempty" url:"status_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListDeleteResponse) GetStatusMessage() *string {
	if l == nil {
		return nil
	}
	return l.StatusMessage
}

func (l *ListDeleteResponse) GetSuccess() *bool {
	if l == nil {
		return nil
	}
	return l.Success
}

func (l *ListDeleteResponse) GetStatusCode() *int {
	if l == nil {
		return nil
	}
	return l.StatusCode
}

func (l *ListDeleteResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListDeleteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListDeleteResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListDetailsResponse struct {
	AverageRating *float64                          `json:"average_rating,omitempty" url:"average_rating,omitempty"`
	BackdropPath  *string                           `json:"backdrop_path,omitempty" url:"backdrop_path,omitempty"`
	Results       []*ListDetailsResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	Comments      *ListDetailsResponseComments      `json:"comments,omitempty" url:"comments,omitempty"`
	CreatedBy     *ListDetailsResponseCreatedBy     `json:"created_by,omitempty" url:"created_by,omitempty"`
	Description   *string                           `json:"description,omitempty" url:"description,omitempty"`
	Id            *int                              `json:"id,omitempty" url:"id,omitempty"`
	Iso31661      *string                           `json:"iso_3166_1,omitempty" url:"iso_3166_1,omitempty"`
	Iso6391       *string                           `json:"iso_639_1,omitempty" url:"iso_639_1,omitempty"`
	ItemCount     *int                              `json:"item_count,omitempty" url:"item_count,omitempty"`
	Name          *string                           `json:"name,omitempty" url:"name,omitempty"`
	ObjectIds     *ListDetailsResponseObjectIds     `json:"object_ids,omitempty" url:"object_ids,omitempty"`
	Page          *int                              `json:"page,omitempty" url:"page,omitempty"`
	PosterPath    *string                           `json:"poster_path,omitempty" url:"poster_path,omitempty"`
	Public        *bool                             `json:"public,omitempty" url:"public,omitempty"`
	Revenue       *int                              `json:"revenue,omitempty" url:"revenue,omitempty"`
	Runtime       *int                              `json:"runtime,omitempty" url:"runtime,omitempty"`
	SortBy        *string                           `json:"sort_by,omitempty" url:"sort_by,omitempty"`
	TotalPages    *int                              `json:"total_pages,omitempty" url:"total_pages,omitempty"`
	TotalResults  *int                              `json:"total_results,omitempty" url:"total_results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListDetailsResponse) GetAverageRating() *float64 {
	if l == nil {
		return nil
	}
	return l.AverageRating
}

func (l *ListDetailsResponse) GetBackdropPath() *string {
	if l == nil {
		return nil
	}
	return l.BackdropPath
}

func (l *ListDetailsResponse) GetResults() []*ListDetailsResponseResultsItem {
	if l == nil {
		return nil
	}
	return l.Results
}

func (l *ListDetailsResponse) GetComments() *ListDetailsResponseComments {
	if l == nil {
		return nil
	}
	return l.Comments
}

func (l *ListDetailsResponse) GetCreatedBy() *ListDetailsResponseCreatedBy {
	if l == nil {
		return nil
	}
	return l.CreatedBy
}

func (l *ListDetailsResponse) GetDescription() *string {
	if l == nil {
		return nil
	}
	return l.Description
}

func (l *ListDetailsResponse) GetId() *int {
	if l == nil {
		return nil
	}
	return l.Id
}

func (l *ListDetailsResponse) GetIso31661() *string {
	if l == nil {
		return nil
	}
	return l.Iso31661
}

func (l *ListDetailsResponse) GetIso6391() *string {
	if l == nil {
		return nil
	}
	return l.Iso6391
}

func (l *ListDetailsResponse) GetItemCount() *int {
	if l == nil {
		return nil
	}
	return l.ItemCount
}

func (l *ListDetailsResponse) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *ListDetailsResponse) GetObjectIds() *ListDetailsResponseObjectIds {
	if l == nil {
		return nil
	}
	return l.ObjectIds
}

func (l *ListDetailsResponse) GetPage() *int {
	if l == nil {
		return nil
	}
	return l.Page
}

func (l *ListDetailsResponse) GetPosterPath() *string {
	if l == nil {
		return nil
	}
	return l.PosterPath
}

func (l *ListDetailsResponse) GetPublic() *bool {
	if l == nil {
		return nil
	}
	return l.Public
}

func (l *ListDetailsResponse) GetRevenue() *int {
	if l == nil {
		return nil
	}
	return l.Revenue
}

func (l *ListDetailsResponse) GetRuntime() *int {
	if l == nil {
		return nil
	}
	return l.Runtime
}

func (l *ListDetailsResponse) GetSortBy() *string {
	if l == nil {
		return nil
	}
	return l.SortBy
}

func (l *ListDetailsResponse) GetTotalPages() *int {
	if l == nil {
		return nil
	}
	return l.TotalPages
}

func (l *ListDetailsResponse) GetTotalResults() *int {
	if l == nil {
		return nil
	}
	return l.TotalResults
}

func (l *ListDetailsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListDetailsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListDetailsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListDetailsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListDetailsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListDetailsResponseComments struct {
	Movie617127 interface{} `json:"movie:617127,omitempty" url:"movie:617127,omitempty"`
	Movie986056 interface{} `json:"movie:986056,omitempty" url:"movie:986056,omitempty"`
	Movie822119 interface{} `json:"movie:822119,omitempty" url:"movie:822119,omitempty"`
	Movie533535 interface{} `json:"movie:533535,omitempty" url:"movie:533535,omitempty"`
	Movie609681 interface{} `json:"movie:609681,omitempty" url:"movie:609681,omitempty"`
	Movie447365 interface{} `json:"movie:447365,omitempty" url:"movie:447365,omitempty"`
	Movie640146 interface{} `json:"movie:640146,omitempty" url:"movie:640146,omitempty"`
	Movie505642 interface{} `json:"movie:505642,omitempty" url:"movie:505642,omitempty"`
	Movie616037 interface{} `json:"movie:616037,omitempty" url:"movie:616037,omitempty"`
	Movie453395 interface{} `json:"movie:453395,omitempty" url:"movie:453395,omitempty"`
	Movie634649 interface{} `json:"movie:634649,omitempty" url:"movie:634649,omitempty"`
	Movie524434 interface{} `json:"movie:524434,omitempty" url:"movie:524434,omitempty"`
	Movie566525 interface{} `json:"movie:566525,omitempty" url:"movie:566525,omitempty"`
	Movie497698 interface{} `json:"movie:497698,omitempty" url:"movie:497698,omitempty"`
	Movie429617 interface{} `json:"movie:429617,omitempty" url:"movie:429617,omitempty"`
	Movie299534 interface{} `json:"movie:299534,omitempty" url:"movie:299534,omitempty"`
	Movie299537 interface{} `json:"movie:299537,omitempty" url:"movie:299537,omitempty"`
	Movie363088 interface{} `json:"movie:363088,omitempty" url:"movie:363088,omitempty"`
	Movie299536 interface{} `json:"movie:299536,omitempty" url:"movie:299536,omitempty"`
	Movie284054 interface{} `json:"movie:284054,omitempty" url:"movie:284054,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListDetailsResponseComments) GetMovie617127() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie617127
}

func (l *ListDetailsResponseComments) GetMovie986056() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie986056
}

func (l *ListDetailsResponseComments) GetMovie822119() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie822119
}

func (l *ListDetailsResponseComments) GetMovie533535() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie533535
}

func (l *ListDetailsResponseComments) GetMovie609681() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie609681
}

func (l *ListDetailsResponseComments) GetMovie447365() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie447365
}

func (l *ListDetailsResponseComments) GetMovie640146() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie640146
}

func (l *ListDetailsResponseComments) GetMovie505642() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie505642
}

func (l *ListDetailsResponseComments) GetMovie616037() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie616037
}

func (l *ListDetailsResponseComments) GetMovie453395() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie453395
}

func (l *ListDetailsResponseComments) GetMovie634649() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie634649
}

func (l *ListDetailsResponseComments) GetMovie524434() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie524434
}

func (l *ListDetailsResponseComments) GetMovie566525() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie566525
}

func (l *ListDetailsResponseComments) GetMovie497698() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie497698
}

func (l *ListDetailsResponseComments) GetMovie429617() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie429617
}

func (l *ListDetailsResponseComments) GetMovie299534() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie299534
}

func (l *ListDetailsResponseComments) GetMovie299537() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie299537
}

func (l *ListDetailsResponseComments) GetMovie363088() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie363088
}

func (l *ListDetailsResponseComments) GetMovie299536() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie299536
}

func (l *ListDetailsResponseComments) GetMovie284054() interface{} {
	if l == nil {
		return nil
	}
	return l.Movie284054
}

func (l *ListDetailsResponseComments) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListDetailsResponseComments) UnmarshalJSON(data []byte) error {
	type unmarshaler ListDetailsResponseComments
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListDetailsResponseComments(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListDetailsResponseComments) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListDetailsResponseCreatedBy struct {
	AvatarPath   *string `json:"avatar_path,omitempty" url:"avatar_path,omitempty"`
	GravatarHash *string `json:"gravatar_hash,omitempty" url:"gravatar_hash,omitempty"`
	Id           *string `json:"id,omitempty" url:"id,omitempty"`
	Name         *string `json:"name,omitempty" url:"name,omitempty"`
	Username     *string `json:"username,omitempty" url:"username,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListDetailsResponseCreatedBy) GetAvatarPath() *string {
	if l == nil {
		return nil
	}
	return l.AvatarPath
}

func (l *ListDetailsResponseCreatedBy) GetGravatarHash() *string {
	if l == nil {
		return nil
	}
	return l.GravatarHash
}

func (l *ListDetailsResponseCreatedBy) GetId() *string {
	if l == nil {
		return nil
	}
	return l.Id
}

func (l *ListDetailsResponseCreatedBy) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *ListDetailsResponseCreatedBy) GetUsername() *string {
	if l == nil {
		return nil
	}
	return l.Username
}

func (l *ListDetailsResponseCreatedBy) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListDetailsResponseCreatedBy) UnmarshalJSON(data []byte) error {
	type unmarshaler ListDetailsResponseCreatedBy
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListDetailsResponseCreatedBy(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListDetailsResponseCreatedBy) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListDetailsResponseObjectIds struct {
	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListDetailsResponseObjectIds) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListDetailsResponseObjectIds) UnmarshalJSON(data []byte) error {
	type unmarshaler ListDetailsResponseObjectIds
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListDetailsResponseObjectIds(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListDetailsResponseObjectIds) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListDetailsResponseResultsItem struct {
	Adult            *bool    `json:"adult,omitempty" url:"adult,omitempty"`
	BackdropPath     *string  `json:"backdrop_path,omitempty" url:"backdrop_path,omitempty"`
	Id               *int     `json:"id,omitempty" url:"id,omitempty"`
	Title            *string  `json:"title,omitempty" url:"title,omitempty"`
	OriginalLanguage *string  `json:"original_language,omitempty" url:"original_language,omitempty"`
	OriginalTitle    *string  `json:"original_title,omitempty" url:"original_title,omitempty"`
	Overview         *string  `json:"overview,omitempty" url:"overview,omitempty"`
	PosterPath       *string  `json:"poster_path,omitempty" url:"poster_path,omitempty"`
	MediaType        *string  `json:"media_type,omitempty" url:"media_type,omitempty"`
	GenreIds         []int    `json:"genre_ids,omitempty" url:"genre_ids,omitempty"`
	Popularity       *float64 `json:"popularity,omitempty" url:"popularity,omitempty"`
	ReleaseDate      *string  `json:"release_date,omitempty" url:"release_date,omitempty"`
	Video            *bool    `json:"video,omitempty" url:"video,omitempty"`
	VoteAverage      *int     `json:"vote_average,omitempty" url:"vote_average,omitempty"`
	VoteCount        *int     `json:"vote_count,omitempty" url:"vote_count,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListDetailsResponseResultsItem) GetAdult() *bool {
	if l == nil {
		return nil
	}
	return l.Adult
}

func (l *ListDetailsResponseResultsItem) GetBackdropPath() *string {
	if l == nil {
		return nil
	}
	return l.BackdropPath
}

func (l *ListDetailsResponseResultsItem) GetId() *int {
	if l == nil {
		return nil
	}
	return l.Id
}

func (l *ListDetailsResponseResultsItem) GetTitle() *string {
	if l == nil {
		return nil
	}
	return l.Title
}

func (l *ListDetailsResponseResultsItem) GetOriginalLanguage() *string {
	if l == nil {
		return nil
	}
	return l.OriginalLanguage
}

func (l *ListDetailsResponseResultsItem) GetOriginalTitle() *string {
	if l == nil {
		return nil
	}
	return l.OriginalTitle
}

func (l *ListDetailsResponseResultsItem) GetOverview() *string {
	if l == nil {
		return nil
	}
	return l.Overview
}

func (l *ListDetailsResponseResultsItem) GetPosterPath() *string {
	if l == nil {
		return nil
	}
	return l.PosterPath
}

func (l *ListDetailsResponseResultsItem) GetMediaType() *string {
	if l == nil {
		return nil
	}
	return l.MediaType
}

func (l *ListDetailsResponseResultsItem) GetGenreIds() []int {
	if l == nil {
		return nil
	}
	return l.GenreIds
}

func (l *ListDetailsResponseResultsItem) GetPopularity() *float64 {
	if l == nil {
		return nil
	}
	return l.Popularity
}

func (l *ListDetailsResponseResultsItem) GetReleaseDate() *string {
	if l == nil {
		return nil
	}
	return l.ReleaseDate
}

func (l *ListDetailsResponseResultsItem) GetVideo() *bool {
	if l == nil {
		return nil
	}
	return l.Video
}

func (l *ListDetailsResponseResultsItem) GetVoteAverage() *int {
	if l == nil {
		return nil
	}
	return l.VoteAverage
}

func (l *ListDetailsResponseResultsItem) GetVoteCount() *int {
	if l == nil {
		return nil
	}
	return l.VoteCount
}

func (l *ListDetailsResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListDetailsResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ListDetailsResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListDetailsResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListDetailsResponseResultsItem) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListItemStatusRequestMediaType string

const (
	ListItemStatusRequestMediaTypeEmpty ListItemStatusRequestMediaType = ""
	ListItemStatusRequestMediaTypeMovie ListItemStatusRequestMediaType = "movie"
	ListItemStatusRequestMediaTypeTv    ListItemStatusRequestMediaType = "tv"
)

func NewListItemStatusRequestMediaTypeFromString(s string) (ListItemStatusRequestMediaType, error) {
	switch s {
	case "":
		return ListItemStatusRequestMediaTypeEmpty, nil
	case "movie":
		return ListItemStatusRequestMediaTypeMovie, nil
	case "tv":
		return ListItemStatusRequestMediaTypeTv, nil
	}
	var t ListItemStatusRequestMediaType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListItemStatusRequestMediaType) Ptr() *ListItemStatusRequestMediaType {
	return &l
}

type ListItemStatusResponse struct {
	MediaType     *string `json:"media_type,omitempty" url:"media_type,omitempty"`
	Success       *bool   `json:"success,omitempty" url:"success,omitempty"`
	StatusMessage *string `json:"status_message,omitempty" url:"status_message,omitempty"`
	Id            *int    `json:"id,omitempty" url:"id,omitempty"`
	MediaId       *int    `json:"media_id,omitempty" url:"media_id,omitempty"`
	StatusCode    *int    `json:"status_code,omitempty" url:"status_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListItemStatusResponse) GetMediaType() *string {
	if l == nil {
		return nil
	}
	return l.MediaType
}

func (l *ListItemStatusResponse) GetSuccess() *bool {
	if l == nil {
		return nil
	}
	return l.Success
}

func (l *ListItemStatusResponse) GetStatusMessage() *string {
	if l == nil {
		return nil
	}
	return l.StatusMessage
}

func (l *ListItemStatusResponse) GetId() *int {
	if l == nil {
		return nil
	}
	return l.Id
}

func (l *ListItemStatusResponse) GetMediaId() *int {
	if l == nil {
		return nil
	}
	return l.MediaId
}

func (l *ListItemStatusResponse) GetStatusCode() *int {
	if l == nil {
		return nil
	}
	return l.StatusCode
}

func (l *ListItemStatusResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListItemStatusResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListItemStatusResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListItemStatusResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListItemStatusResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListRemoveItemsResponse struct {
	StatusMessage *string                               `json:"status_message,omitempty" url:"status_message,omitempty"`
	Results       []*ListRemoveItemsResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	Success       *bool                                 `json:"success,omitempty" url:"success,omitempty"`
	StatusCode    *int                                  `json:"status_code,omitempty" url:"status_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListRemoveItemsResponse) GetStatusMessage() *string {
	if l == nil {
		return nil
	}
	return l.StatusMessage
}

func (l *ListRemoveItemsResponse) GetResults() []*ListRemoveItemsResponseResultsItem {
	if l == nil {
		return nil
	}
	return l.Results
}

func (l *ListRemoveItemsResponse) GetSuccess() *bool {
	if l == nil {
		return nil
	}
	return l.Success
}

func (l *ListRemoveItemsResponse) GetStatusCode() *int {
	if l == nil {
		return nil
	}
	return l.StatusCode
}

func (l *ListRemoveItemsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListRemoveItemsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListRemoveItemsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListRemoveItemsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRemoveItemsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListRemoveItemsResponseResultsItem struct {
	MediaType *string `json:"media_type,omitempty" url:"media_type,omitempty"`
	MediaId   *int    `json:"media_id,omitempty" url:"media_id,omitempty"`
	Success   *bool   `json:"success,omitempty" url:"success,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListRemoveItemsResponseResultsItem) GetMediaType() *string {
	if l == nil {
		return nil
	}
	return l.MediaType
}

func (l *ListRemoveItemsResponseResultsItem) GetMediaId() *int {
	if l == nil {
		return nil
	}
	return l.MediaId
}

func (l *ListRemoveItemsResponseResultsItem) GetSuccess() *bool {
	if l == nil {
		return nil
	}
	return l.Success
}

func (l *ListRemoveItemsResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListRemoveItemsResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ListRemoveItemsResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListRemoveItemsResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListRemoveItemsResponseResultsItem) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListUpdateItemsResponse struct {
	StatusMessage *string                               `json:"status_message,omitempty" url:"status_message,omitempty"`
	Results       []*ListUpdateItemsResponseResultsItem `json:"results,omitempty" url:"results,omitempty"`
	Success       *bool                                 `json:"success,omitempty" url:"success,omitempty"`
	StatusCode    *int                                  `json:"status_code,omitempty" url:"status_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUpdateItemsResponse) GetStatusMessage() *string {
	if l == nil {
		return nil
	}
	return l.StatusMessage
}

func (l *ListUpdateItemsResponse) GetResults() []*ListUpdateItemsResponseResultsItem {
	if l == nil {
		return nil
	}
	return l.Results
}

func (l *ListUpdateItemsResponse) GetSuccess() *bool {
	if l == nil {
		return nil
	}
	return l.Success
}

func (l *ListUpdateItemsResponse) GetStatusCode() *int {
	if l == nil {
		return nil
	}
	return l.StatusCode
}

func (l *ListUpdateItemsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUpdateItemsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUpdateItemsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUpdateItemsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUpdateItemsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListUpdateItemsResponseResultsItem struct {
	MediaType *string `json:"media_type,omitempty" url:"media_type,omitempty"`
	MediaId   *int    `json:"media_id,omitempty" url:"media_id,omitempty"`
	Success   *bool   `json:"success,omitempty" url:"success,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUpdateItemsResponseResultsItem) GetMediaType() *string {
	if l == nil {
		return nil
	}
	return l.MediaType
}

func (l *ListUpdateItemsResponseResultsItem) GetMediaId() *int {
	if l == nil {
		return nil
	}
	return l.MediaId
}

func (l *ListUpdateItemsResponseResultsItem) GetSuccess() *bool {
	if l == nil {
		return nil
	}
	return l.Success
}

func (l *ListUpdateItemsResponseResultsItem) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUpdateItemsResponseResultsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUpdateItemsResponseResultsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUpdateItemsResponseResultsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUpdateItemsResponseResultsItem) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListUpdateResponse struct {
	StatusMessage *string `json:"status_message,omitempty" url:"status_message,omitempty"`
	Success       *bool   `json:"success,omitempty" url:"success,omitempty"`
	StatusCode    *int    `json:"status_code,omitempty" url:"status_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUpdateResponse) GetStatusMessage() *string {
	if l == nil {
		return nil
	}
	return l.StatusMessage
}

func (l *ListUpdateResponse) GetSuccess() *bool {
	if l == nil {
		return nil
	}
	return l.Success
}

func (l *ListUpdateResponse) GetStatusCode() *int {
	if l == nil {
		return nil
	}
	return l.StatusCode
}

func (l *ListUpdateResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUpdateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUpdateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUpdateResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUpdateResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
