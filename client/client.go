// Code generated by Fern. DO NOT EDIT.

package client

import (
	context "context"
	MovieAPIGoSDK "github.com/Ryan-Amirthan/MovieAPI-GoSDK"
	core "github.com/Ryan-Amirthan/MovieAPI-GoSDK/core"
	internal "github.com/Ryan-Amirthan/MovieAPI-GoSDK/internal"
	option "github.com/Ryan-Amirthan/MovieAPI-GoSDK/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (c *Client) AuthCreateRequestToken(
	ctx context.Context,
	request *MovieAPIGoSDK.AuthCreateRequestTokenRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AuthCreateRequestTokenResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := baseURL + "/4/auth/request_token"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *MovieAPIGoSDK.AuthCreateRequestTokenResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) AuthCreateAccessToken(
	ctx context.Context,
	request *MovieAPIGoSDK.AuthCreateAccessTokenRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AuthCreateAccessTokenResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := baseURL + "/4/auth/access_token"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *MovieAPIGoSDK.AuthCreateAccessTokenResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Log out of a session.
func (c *Client) AuthLogout(
	ctx context.Context,
	request *MovieAPIGoSDK.AuthLogoutRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AuthLogoutResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := baseURL + "/4/auth/access_token"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *MovieAPIGoSDK.AuthLogoutResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieve a list by id.
func (c *Client) ListDetails(
	ctx context.Context,
	listId int,
	request *MovieAPIGoSDK.ListDetailsRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.ListDetailsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/list/%v",
		listId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.ListDetailsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Update the details of a list.
func (c *Client) ListUpdate(
	ctx context.Context,
	listId int,
	request *MovieAPIGoSDK.ListUpdateRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.ListUpdateResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/list/%v",
		listId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *MovieAPIGoSDK.ListUpdateResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Create a new list.
func (c *Client) ListCreate(
	ctx context.Context,
	request *MovieAPIGoSDK.ListCreateRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.ListCreateResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := baseURL + "/4/list"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *MovieAPIGoSDK.ListCreateResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Clear all of the items on a list.
func (c *Client) ListClear(
	ctx context.Context,
	listId int,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.ListClearResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/list/%v/clear",
		listId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.ListClearResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Delete a list.
func (c *Client) ListDelete(
	ctx context.Context,
	listId int,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.ListDeleteResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/%v",
		listId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.ListDeleteResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Add items to a list.
func (c *Client) ListAddItems(
	ctx context.Context,
	listId int,
	request *MovieAPIGoSDK.ListAddItemsRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.ListAddItemsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/list/%v/items",
		listId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *MovieAPIGoSDK.ListAddItemsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Update an individual item on a list
func (c *Client) ListUpdateItems(
	ctx context.Context,
	listId string,
	request *MovieAPIGoSDK.ListUpdateItemsRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.ListUpdateItemsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/list/%v/items",
		listId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *MovieAPIGoSDK.ListUpdateItemsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Remove items from a list
func (c *Client) ListRemoveItems(
	ctx context.Context,
	listId int,
	request *MovieAPIGoSDK.ListRemoveItemsRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.ListRemoveItemsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/list/%v/items",
		listId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")

	var response *MovieAPIGoSDK.ListRemoveItemsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Check if an item is on a list.
func (c *Client) ListItemStatus(
	ctx context.Context,
	listId int,
	request *MovieAPIGoSDK.ListItemStatusRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.ListItemStatusResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/list/%v/item_status",
		listId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.ListItemStatusResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get the custom lists that a user has created.
func (c *Client) AccountLists(
	ctx context.Context,
	accountObjectId string,
	request *MovieAPIGoSDK.AccountListsRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AccountListsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/account/%v/lists",
		accountObjectId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.AccountListsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get a users list of favourite movies.
func (c *Client) AccountFavoriteMovies(
	ctx context.Context,
	accountObjectId string,
	request *MovieAPIGoSDK.AccountFavoriteMoviesRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AccountFavoriteMoviesResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/account/%v/movie/favorites",
		accountObjectId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.AccountFavoriteMoviesResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get a users list of favourite TV shows.
func (c *Client) AccountFavoriteTv(
	ctx context.Context,
	accountObjectId string,
	request *MovieAPIGoSDK.AccountFavoriteTvRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AccountFavoriteTvResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/account/%v/tv/favorites",
		accountObjectId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.AccountFavoriteTvResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get a users list of recommended TV shows.
func (c *Client) AccountTvRecommendations(
	ctx context.Context,
	accountObjectId string,
	request *MovieAPIGoSDK.AccountTvRecommendationsRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AccountTvRecommendationsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/account/%v/tv/recommendations",
		accountObjectId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.AccountTvRecommendationsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get a users list of recommended movies.
func (c *Client) AccountMovieRecommendations(
	ctx context.Context,
	accountObjectId string,
	request *MovieAPIGoSDK.AccountMovieRecommendationsRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AccountMovieRecommendationsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/account/%v/movie/recommendations",
		accountObjectId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.AccountMovieRecommendationsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get a users movie watchlist.
func (c *Client) AccountMovieWatchlist(
	ctx context.Context,
	accountObjectId string,
	request *MovieAPIGoSDK.AccountMovieWatchlistRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AccountMovieWatchlistResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/account/%v/movie/watchlist",
		accountObjectId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.AccountMovieWatchlistResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get a users TV watchlist.
func (c *Client) AccountTvWatchlist(
	ctx context.Context,
	accountObjectId string,
	request *MovieAPIGoSDK.AccountTvWatchlistRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AccountTvWatchlistResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/account/%v/tv/watchlist",
		accountObjectId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.AccountTvWatchlistResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get a users rated movies.
func (c *Client) AccountRatedMovies(
	ctx context.Context,
	accountObjectId string,
	request *MovieAPIGoSDK.AccountRatedMoviesRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AccountRatedMoviesResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/account/%v/movie/rated",
		accountObjectId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.AccountRatedMoviesResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get a users rated TV shows.
func (c *Client) AccountRatedTv(
	ctx context.Context,
	accountObjectId string,
	request *MovieAPIGoSDK.AccountRatedTvRequest,
	opts ...option.RequestOption,
) (*MovieAPIGoSDK.AccountRatedTvResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/4/account/%v/tv/rated",
		accountObjectId,
	)
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response *MovieAPIGoSDK.AccountRatedTvResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) GettingStarted(
	ctx context.Context,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.themoviedb.org",
	)
	endpointURL := baseURL
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
		},
	); err != nil {
		return err
	}
	return nil
}
